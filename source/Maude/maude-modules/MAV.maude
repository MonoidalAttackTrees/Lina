mod MAV is

sorts Atom Unit Formula .
subsort Atom < Formula .
subsort Unit < Formula .

op I : -> Unit .
op -_ : Atom -> Atom [prec 50 gather (&)] .
op _||_ : Formula Formula -> Formula [assoc comm id: I] .
op _&_ : Formula Formula -> Formula [assoc] .
op _x_ : Formula Formula -> Formula [assoc comm id: I] .
op _+_ : Formula Formula -> Formula [assoc] .
op _;_ : Formula Formula -> Formula [assoc id: I] .
op \(_\) : Formula -> Formula [prec 0 gather (&)] .
ops a b c d e : -> Atom .

op neqI : Formula -> Bool .

var P Q R S : Formula .
var A : Atom .

eq neqI(I) = false .
eq neqI(A) = true .
eq neqI(P || Q) = true .
eq neqI(P & Q) = true .
eq neqI(P x Q) = true .
eq neqI(P + Q) = true .
eq neqI(P ; Q) = true .

rl [tidy] : I & I => I .

rl [inter] : - A || A => I .

***()
crl [switch] : (P x Q) || R => P x (Q || R) 
    if neqI(P) /\ neqI(R) .

***()
crl [sequence] : (P ; Q) || (R ; S) => (P || R) ; (Q || S) 
   if neqI(P) /\ neqI(S) .

rl [left] : P + Q => P .

rl [right] : P + Q => Q .

***()
crl [external] : (P & Q) || R => (P || R) & (Q || R) 
   if neqI(R) .

crl [medial] : (P ; Q) & (R ; S) => (P & R) ; (Q & S)
   if (neqI(P) or neqI(R)) /\ (neqI(Q) or neqI(S)) .

endm

***( ((((- a) x ((- b) ; (- c))) & ((- b) ; ((- d) x (- c)))) || (a + d) || (b ; c)) =>+ I )

